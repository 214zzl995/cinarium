// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'app.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'model/video.dart';
import 'native.dart';
import 'native/db_api.dart';
import 'native/home_api.dart';
import 'native/system_api.dart';
import 'native/task_api.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'task.dart';
import 'task/crawler.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => -1536741240;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'cinarium_core',
    ioDirectory: '../rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  void crateNativeListenerHandleCancel({required ListenerHandle that});

  Future<List<HomeVideo>> crateNativeDbApiGetHomeVideos();

  Future<List<UntreatedVideo>> crateNativeDbApiGetTaskVideos();

  Future<void> crateNativeDbApiSwitchVideosHidden({required List<int> ids});

  Future<void> crateNativeDbApiUpdateCrawlName(
      {required int id, required String crawlName});

  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetActor(
      {required HomeVideoData that});

  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetActorFilter(
      {required HomeVideoData that});

  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetActorVideos(
          {required HomeVideoData that});

  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetDirector(
      {required HomeVideoData that});

  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorFilter(
      {required HomeVideoData that});

  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorVideos(
          {required HomeVideoData that});

  List<HomeVideo> crateNativeHomeApiHomeVideoDataAutoAccessorGetFilterVideo(
      {required HomeVideoData that});

  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetMaker(
      {required HomeVideoData that});

  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetMakerFilter(
      {required HomeVideoData that});

  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetMakerVideos(
          {required HomeVideoData that});

  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisher(
      {required HomeVideoData that});

  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherFilter(
      {required HomeVideoData that});

  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherVideos(
          {required HomeVideoData that});

  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetSeries(
      {required HomeVideoData that});

  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesFilter(
      {required HomeVideoData that});

  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesVideos(
          {required HomeVideoData that});

  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetTag(
      {required HomeVideoData that});

  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetTagFilter(
      {required HomeVideoData that});

  Map<int, Uint32List> crateNativeHomeApiHomeVideoDataAutoAccessorGetTagVideos(
      {required HomeVideoData that});

  Map<int, HomeVideo> crateNativeHomeApiHomeVideoDataAutoAccessorGetVideos(
      {required HomeVideoData that});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetActor(
      {required HomeVideoData that, required Map<int, String> actor});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetActorFilter(
      {required HomeVideoData that, required Uint32List actorFilter});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetActorVideos(
      {required HomeVideoData that, required Map<int, Uint32List> actorVideos});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetDirector(
      {required HomeVideoData that, required Map<int, String> director});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorFilter(
      {required HomeVideoData that, required Uint32List directorFilter});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorVideos(
      {required HomeVideoData that,
      required Map<int, Uint32List> directorVideos});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetFilterVideo(
      {required HomeVideoData that, required List<HomeVideo> filterVideo});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetMaker(
      {required HomeVideoData that, required Map<int, String> maker});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetMakerFilter(
      {required HomeVideoData that, required Uint32List makerFilter});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetMakerVideos(
      {required HomeVideoData that, required Map<int, Uint32List> makerVideos});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisher(
      {required HomeVideoData that, required Map<int, String> publisher});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherFilter(
      {required HomeVideoData that, required Uint32List publisherFilter});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherVideos(
      {required HomeVideoData that,
      required Map<int, Uint32List> publisherVideos});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetSeries(
      {required HomeVideoData that, required Map<int, String> series});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesFilter(
      {required HomeVideoData that, required Uint32List seriesFilter});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesVideos(
      {required HomeVideoData that,
      required Map<int, Uint32List> seriesVideos});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetTag(
      {required HomeVideoData that, required Map<int, String> tag});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetTagFilter(
      {required HomeVideoData that, required Uint32List tagFilter});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetTagVideos(
      {required HomeVideoData that, required Map<int, Uint32List> tagVideos});

  void crateNativeHomeApiHomeVideoDataAutoAccessorSetVideos(
      {required HomeVideoData that, required Map<int, HomeVideo> videos});

  Future<HomeVideoData> crateNativeHomeApiHomeVideoDataNew();

  Future<void> crateNativeSystemApiChangeCrawlerTemplatesPriority(
      {required List<(int, int)> prioritys});

  List<CrawlerTemplate> crateNativeSystemApiGetCrawlerTemplates();

  Future<HttpConfig> crateNativeSystemApiGetHttpConf();

  bool crateNativeSystemApiGetHttpStatus();

  String crateNativeSystemApiGetLocalIp();

  Future<TaskConfig> crateNativeSystemApiGetTaskConf();

  Future<void> crateNativeSystemApiInitAppLog();

  ListenerHandle crateNativeSystemApiListenerHttpStatus(
      {required FutureOr<void> Function(bool) dartCallback});

  ListenerHandle crateNativeSystemApiListenerUntreatedFile(
      {required FutureOr<void> Function() dartCallback});

  Future<void> crateNativeSystemApiOpenInDefaultSoftware(
      {required String path});

  Future<void> crateNativeSystemApiOpenInExplorer({required String path});

  String crateNativeSystemApiPathBuf2String({required PathBuf path});

  Future<void> crateNativeSystemApiRunWebApi();

  Future<void> crateNativeSystemApiStopWebApi();

  PathBuf crateNativeSystemApiString2PathBuf({required String path});

  Future<void> crateNativeSystemApiSwitchCrawlerTemplateEnabled(
      {required int id});

  Future<void> crateNativeSystemApiUpdateHttpPort({required int port});

  Future<void> crateNativeSystemApiUpdateTaskThread({required BigInt thread});

  Future<void> crateNativeSystemApiUpdateTaskTidyFolder();

  Future<void> crateNativeTaskApiChangeTaskStatus(
      {required String id, required TaskStatus status});

  Future<void> crateNativeTaskApiDeleteTask({required String id});

  Future<void> crateNativeTaskApiForcePausePool();

  PoolData crateNativeTaskApiGetPoolData();

  Future<List<String>> crateNativeTaskApiInsertionOfTasks(
      {required List<TaskMetadata> tasks});

  ListenerHandle crateNativeTaskApiListenerPoolStatusChange(
      {required FutureOr<void> Function(PoolStatus) dartCallback});

  ListenerHandle crateNativeTaskApiListenerTaskStatusChange(
      {required FutureOr<void> Function(String, TaskStatus) dartCallback});

  Future<void> crateNativeTaskApiPausePool();

  Future<void> crateNativeTaskApiPoolInit();

  Future<void> crateNativeTaskApiResumePool();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HomeVideoData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HomeVideoData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HomeVideoDataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ListenerHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ListenerHandle;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ListenerHandlePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PathBuf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PathBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PathBufPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TemplateVideoDataInterim;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TemplateVideoDataInterim;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TemplateVideoDataInterimPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  void crateNativeListenerHandleCancel({required ListenerHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeListenerHandleCancelConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeListenerHandleCancelConstMeta =>
      const TaskConstMeta(
        debugName: "ListenerHandle_cancel",
        argNames: ["that"],
      );

  @override
  Future<List<HomeVideo>> crateNativeDbApiGetHomeVideos() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_home_video,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeDbApiGetHomeVideosConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeDbApiGetHomeVideosConstMeta =>
      const TaskConstMeta(
        debugName: "get_home_videos",
        argNames: [],
      );

  @override
  Future<List<UntreatedVideo>> crateNativeDbApiGetTaskVideos() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_untreated_video,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeDbApiGetTaskVideosConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeDbApiGetTaskVideosConstMeta =>
      const TaskConstMeta(
        debugName: "get_task_videos",
        argNames: [],
      );

  @override
  Future<void> crateNativeDbApiSwitchVideosHidden({required List<int> ids}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeDbApiSwitchVideosHiddenConstMeta,
      argValues: [ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeDbApiSwitchVideosHiddenConstMeta =>
      const TaskConstMeta(
        debugName: "switch_videos_hidden",
        argNames: ["ids"],
      );

  @override
  Future<void> crateNativeDbApiUpdateCrawlName(
      {required int id, required String crawlName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        sse_encode_String(crawlName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeDbApiUpdateCrawlNameConstMeta,
      argValues: [id, crawlName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeDbApiUpdateCrawlNameConstMeta =>
      const TaskConstMeta(
        debugName: "update_crawl_name",
        argNames: ["id", "crawlName"],
      );

  @override
  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetActor(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorGetActorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetActorConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_actor",
            argNames: ["that"],
          );

  @override
  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetActorFilter(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetActorFilterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetActorFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_actor_filter",
            argNames: ["that"],
          );

  @override
  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetActorVideos(
          {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetActorVideosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetActorVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_actor_videos",
            argNames: ["that"],
          );

  @override
  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetDirector(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_director",
            argNames: ["that"],
          );

  @override
  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorFilter(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorFilterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_director_filter",
            argNames: ["that"],
          );

  @override
  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorVideos(
          {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorVideosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_director_videos",
            argNames: ["that"],
          );

  @override
  List<HomeVideo> crateNativeHomeApiHomeVideoDataAutoAccessorGetFilterVideo(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_home_video,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetFilterVideoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetFilterVideoConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_filter_video",
            argNames: ["that"],
          );

  @override
  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetMaker(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorGetMakerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetMakerConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_maker",
            argNames: ["that"],
          );

  @override
  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetMakerFilter(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetMakerFilterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetMakerFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_maker_filter",
            argNames: ["that"],
          );

  @override
  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetMakerVideos(
          {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetMakerVideosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetMakerVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_maker_videos",
            argNames: ["that"],
          );

  @override
  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisher(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_publisher",
            argNames: ["that"],
          );

  @override
  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherFilter(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherFilterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_publisher_filter",
            argNames: ["that"],
          );

  @override
  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherVideos(
          {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherVideosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_publisher_videos",
            argNames: ["that"],
          );

  @override
  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetSeries(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_series",
            argNames: ["that"],
          );

  @override
  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesFilter(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesFilterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_series_filter",
            argNames: ["that"],
          );

  @override
  Map<int, Uint32List>
      crateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesVideos(
          {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesVideosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_series_videos",
            argNames: ["that"],
          );

  @override
  Map<int, String> crateNativeHomeApiHomeVideoDataAutoAccessorGetTag(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorGetTagConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetTagConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_tag",
            argNames: ["that"],
          );

  @override
  Uint32List crateNativeHomeApiHomeVideoDataAutoAccessorGetTagFilter(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetTagFilterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetTagFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_tag_filter",
            argNames: ["that"],
          );

  @override
  Map<int, Uint32List> crateNativeHomeApiHomeVideoDataAutoAccessorGetTagVideos(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorGetTagVideosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetTagVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_tag_videos",
            argNames: ["that"],
          );

  @override
  Map<int, HomeVideo> crateNativeHomeApiHomeVideoDataAutoAccessorGetVideos(
      {required HomeVideoData that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_u_32_home_video,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorGetVideosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorGetVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_get_videos",
            argNames: ["that"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetActor(
      {required HomeVideoData that, required Map<int, String> actor}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_String(actor, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorSetActorConstMeta,
      argValues: [that, actor],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetActorConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_actor",
            argNames: ["that", "actor"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetActorFilter(
      {required HomeVideoData that, required Uint32List actorFilter}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_list_prim_u_32_strict(actorFilter, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetActorFilterConstMeta,
      argValues: [that, actorFilter],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetActorFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_actor_filter",
            argNames: ["that", "actorFilter"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetActorVideos(
      {required HomeVideoData that,
      required Map<int, Uint32List> actorVideos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_list_prim_u_32_strict(actorVideos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetActorVideosConstMeta,
      argValues: [that, actorVideos],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetActorVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_actor_videos",
            argNames: ["that", "actorVideos"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetDirector(
      {required HomeVideoData that, required Map<int, String> director}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_String(director, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorConstMeta,
      argValues: [that, director],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_director",
            argNames: ["that", "director"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorFilter(
      {required HomeVideoData that, required Uint32List directorFilter}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_list_prim_u_32_strict(directorFilter, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorFilterConstMeta,
      argValues: [that, directorFilter],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_director_filter",
            argNames: ["that", "directorFilter"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorVideos(
      {required HomeVideoData that,
      required Map<int, Uint32List> directorVideos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_list_prim_u_32_strict(directorVideos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorVideosConstMeta,
      argValues: [that, directorVideos],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_director_videos",
            argNames: ["that", "directorVideos"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetFilterVideo(
      {required HomeVideoData that, required List<HomeVideo> filterVideo}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_list_home_video(filterVideo, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetFilterVideoConstMeta,
      argValues: [that, filterVideo],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetFilterVideoConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_filter_video",
            argNames: ["that", "filterVideo"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetMaker(
      {required HomeVideoData that, required Map<int, String> maker}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_String(maker, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorSetMakerConstMeta,
      argValues: [that, maker],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetMakerConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_maker",
            argNames: ["that", "maker"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetMakerFilter(
      {required HomeVideoData that, required Uint32List makerFilter}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_list_prim_u_32_strict(makerFilter, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetMakerFilterConstMeta,
      argValues: [that, makerFilter],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetMakerFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_maker_filter",
            argNames: ["that", "makerFilter"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetMakerVideos(
      {required HomeVideoData that,
      required Map<int, Uint32List> makerVideos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_list_prim_u_32_strict(makerVideos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetMakerVideosConstMeta,
      argValues: [that, makerVideos],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetMakerVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_maker_videos",
            argNames: ["that", "makerVideos"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisher(
      {required HomeVideoData that, required Map<int, String> publisher}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_String(publisher, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherConstMeta,
      argValues: [that, publisher],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_publisher",
            argNames: ["that", "publisher"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherFilter(
      {required HomeVideoData that, required Uint32List publisherFilter}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_list_prim_u_32_strict(publisherFilter, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherFilterConstMeta,
      argValues: [that, publisherFilter],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_publisher_filter",
            argNames: ["that", "publisherFilter"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherVideos(
      {required HomeVideoData that,
      required Map<int, Uint32List> publisherVideos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_list_prim_u_32_strict(publisherVideos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherVideosConstMeta,
      argValues: [that, publisherVideos],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_publisher_videos",
            argNames: ["that", "publisherVideos"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetSeries(
      {required HomeVideoData that, required Map<int, String> series}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_String(series, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesConstMeta,
      argValues: [that, series],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_series",
            argNames: ["that", "series"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesFilter(
      {required HomeVideoData that, required Uint32List seriesFilter}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_list_prim_u_32_strict(seriesFilter, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesFilterConstMeta,
      argValues: [that, seriesFilter],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_series_filter",
            argNames: ["that", "seriesFilter"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesVideos(
      {required HomeVideoData that,
      required Map<int, Uint32List> seriesVideos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_list_prim_u_32_strict(seriesVideos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesVideosConstMeta,
      argValues: [that, seriesVideos],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_series_videos",
            argNames: ["that", "seriesVideos"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetTag(
      {required HomeVideoData that, required Map<int, String> tag}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_String(tag, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorSetTagConstMeta,
      argValues: [that, tag],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetTagConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_tag",
            argNames: ["that", "tag"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetTagFilter(
      {required HomeVideoData that, required Uint32List tagFilter}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_list_prim_u_32_strict(tagFilter, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetTagFilterConstMeta,
      argValues: [that, tagFilter],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetTagFilterConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_tag_filter",
            argNames: ["that", "tagFilter"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetTagVideos(
      {required HomeVideoData that, required Map<int, Uint32List> tagVideos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_list_prim_u_32_strict(tagVideos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateNativeHomeApiHomeVideoDataAutoAccessorSetTagVideosConstMeta,
      argValues: [that, tagVideos],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetTagVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_tag_videos",
            argNames: ["that", "tagVideos"],
          );

  @override
  void crateNativeHomeApiHomeVideoDataAutoAccessorSetVideos(
      {required HomeVideoData that, required Map<int, HomeVideo> videos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
            that, serializer);
        sse_encode_Map_u_32_home_video(videos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataAutoAccessorSetVideosConstMeta,
      argValues: [that, videos],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeHomeApiHomeVideoDataAutoAccessorSetVideosConstMeta =>
          const TaskConstMeta(
            debugName: "HomeVideoData_auto_accessor_set_videos",
            argNames: ["that", "videos"],
          );

  @override
  Future<HomeVideoData> crateNativeHomeApiHomeVideoDataNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeHomeApiHomeVideoDataNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeHomeApiHomeVideoDataNewConstMeta =>
      const TaskConstMeta(
        debugName: "HomeVideoData_new",
        argNames: [],
      );

  @override
  Future<void> crateNativeSystemApiChangeCrawlerTemplatesPriority(
      {required List<(int, int)> prioritys}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_u_32_u_8(prioritys, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiChangeCrawlerTemplatesPriorityConstMeta,
      argValues: [prioritys],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeSystemApiChangeCrawlerTemplatesPriorityConstMeta =>
          const TaskConstMeta(
            debugName: "change_crawler_templates_priority",
            argNames: ["prioritys"],
          );

  @override
  List<CrawlerTemplate> crateNativeSystemApiGetCrawlerTemplates() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_crawler_template,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiGetCrawlerTemplatesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiGetCrawlerTemplatesConstMeta =>
      const TaskConstMeta(
        debugName: "get_crawler_templates",
        argNames: [],
      );

  @override
  Future<HttpConfig> crateNativeSystemApiGetHttpConf() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_http_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeSystemApiGetHttpConfConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiGetHttpConfConstMeta =>
      const TaskConstMeta(
        debugName: "get_http_conf",
        argNames: [],
      );

  @override
  bool crateNativeSystemApiGetHttpStatus() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiGetHttpStatusConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiGetHttpStatusConstMeta =>
      const TaskConstMeta(
        debugName: "get_http_status",
        argNames: [],
      );

  @override
  String crateNativeSystemApiGetLocalIp() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiGetLocalIpConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiGetLocalIpConstMeta =>
      const TaskConstMeta(
        debugName: "get_local_ip",
        argNames: [],
      );

  @override
  Future<TaskConfig> crateNativeSystemApiGetTaskConf() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_task_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeSystemApiGetTaskConfConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiGetTaskConfConstMeta =>
      const TaskConstMeta(
        debugName: "get_task_conf",
        argNames: [],
      );

  @override
  Future<void> crateNativeSystemApiInitAppLog() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiInitAppLogConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiInitAppLogConstMeta =>
      const TaskConstMeta(
        debugName: "init_app_log",
        argNames: [],
      );

  @override
  ListenerHandle crateNativeSystemApiListenerHttpStatus(
      {required FutureOr<void> Function(bool) dartCallback}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
            dartCallback, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeSystemApiListenerHttpStatusConstMeta,
      argValues: [dartCallback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiListenerHttpStatusConstMeta =>
      const TaskConstMeta(
        debugName: "listener_http_status",
        argNames: ["dartCallback"],
      );

  @override
  ListenerHandle crateNativeSystemApiListenerUntreatedFile(
      {required FutureOr<void> Function() dartCallback}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
            dartCallback, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeSystemApiListenerUntreatedFileConstMeta,
      argValues: [dartCallback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiListenerUntreatedFileConstMeta =>
      const TaskConstMeta(
        debugName: "listener_untreated_file",
        argNames: ["dartCallback"],
      );

  @override
  Future<void> crateNativeSystemApiOpenInDefaultSoftware(
      {required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiOpenInDefaultSoftwareConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiOpenInDefaultSoftwareConstMeta =>
      const TaskConstMeta(
        debugName: "open_in_default_software",
        argNames: ["path"],
      );

  @override
  Future<void> crateNativeSystemApiOpenInExplorer({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiOpenInExplorerConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiOpenInExplorerConstMeta =>
      const TaskConstMeta(
        debugName: "open_in_explorer",
        argNames: ["path"],
      );

  @override
  String crateNativeSystemApiPathBuf2String({required PathBuf path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeSystemApiPathBuf2StringConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiPathBuf2StringConstMeta =>
      const TaskConstMeta(
        debugName: "path_buf_2_string",
        argNames: ["path"],
      );

  @override
  Future<void> crateNativeSystemApiRunWebApi() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiRunWebApiConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiRunWebApiConstMeta =>
      const TaskConstMeta(
        debugName: "run_web_api",
        argNames: [],
      );

  @override
  Future<void> crateNativeSystemApiStopWebApi() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiStopWebApiConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiStopWebApiConstMeta =>
      const TaskConstMeta(
        debugName: "stop_web_api",
        argNames: [],
      );

  @override
  PathBuf crateNativeSystemApiString2PathBuf({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeSystemApiString2PathBufConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiString2PathBufConstMeta =>
      const TaskConstMeta(
        debugName: "string_2_path_buf",
        argNames: ["path"],
      );

  @override
  Future<void> crateNativeSystemApiSwitchCrawlerTemplateEnabled(
      {required int id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiSwitchCrawlerTemplateEnabledConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateNativeSystemApiSwitchCrawlerTemplateEnabledConstMeta =>
          const TaskConstMeta(
            debugName: "switch_crawler_template_enabled",
            argNames: ["id"],
          );

  @override
  Future<void> crateNativeSystemApiUpdateHttpPort({required int port}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(port, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiUpdateHttpPortConstMeta,
      argValues: [port],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiUpdateHttpPortConstMeta =>
      const TaskConstMeta(
        debugName: "update_http_port",
        argNames: ["port"],
      );

  @override
  Future<void> crateNativeSystemApiUpdateTaskThread({required BigInt thread}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(thread, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiUpdateTaskThreadConstMeta,
      argValues: [thread],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiUpdateTaskThreadConstMeta =>
      const TaskConstMeta(
        debugName: "update_task_thread",
        argNames: ["thread"],
      );

  @override
  Future<void> crateNativeSystemApiUpdateTaskTidyFolder() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 65, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeSystemApiUpdateTaskTidyFolderConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeSystemApiUpdateTaskTidyFolderConstMeta =>
      const TaskConstMeta(
        debugName: "update_task_tidy_folder",
        argNames: [],
      );

  @override
  Future<void> crateNativeTaskApiChangeTaskStatus(
      {required String id, required TaskStatus status}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_task_status(status, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 66, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeTaskApiChangeTaskStatusConstMeta,
      argValues: [id, status],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiChangeTaskStatusConstMeta =>
      const TaskConstMeta(
        debugName: "change_task_status",
        argNames: ["id", "status"],
      );

  @override
  Future<void> crateNativeTaskApiDeleteTask({required String id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeTaskApiDeleteTaskConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiDeleteTaskConstMeta =>
      const TaskConstMeta(
        debugName: "delete_task",
        argNames: ["id"],
      );

  @override
  Future<void> crateNativeTaskApiForcePausePool() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeTaskApiForcePausePoolConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiForcePausePoolConstMeta =>
      const TaskConstMeta(
        debugName: "force_pause_pool",
        argNames: [],
      );

  @override
  PoolData crateNativeTaskApiGetPoolData() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pool_data,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeTaskApiGetPoolDataConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiGetPoolDataConstMeta =>
      const TaskConstMeta(
        debugName: "get_pool_data",
        argNames: [],
      );

  @override
  Future<List<String>> crateNativeTaskApiInsertionOfTasks(
      {required List<TaskMetadata> tasks}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_task_metadata(tasks, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 70, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeTaskApiInsertionOfTasksConstMeta,
      argValues: [tasks],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiInsertionOfTasksConstMeta =>
      const TaskConstMeta(
        debugName: "insertion_of_tasks",
        argNames: ["tasks"],
      );

  @override
  ListenerHandle crateNativeTaskApiListenerPoolStatusChange(
      {required FutureOr<void> Function(PoolStatus) dartCallback}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_pool_status_Output_unit_AnyhowException(
            dartCallback, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 71)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeTaskApiListenerPoolStatusChangeConstMeta,
      argValues: [dartCallback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiListenerPoolStatusChangeConstMeta =>
      const TaskConstMeta(
        debugName: "listener_pool_status_change",
        argNames: ["dartCallback"],
      );

  @override
  ListenerHandle crateNativeTaskApiListenerTaskStatusChange(
      {required FutureOr<void> Function(String, TaskStatus) dartCallback}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_task_status_Output_unit_AnyhowException(
            dartCallback, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateNativeTaskApiListenerTaskStatusChangeConstMeta,
      argValues: [dartCallback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiListenerTaskStatusChangeConstMeta =>
      const TaskConstMeta(
        debugName: "listener_task_status_change",
        argNames: ["dartCallback"],
      );

  @override
  Future<void> crateNativeTaskApiPausePool() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeTaskApiPausePoolConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiPausePoolConstMeta =>
      const TaskConstMeta(
        debugName: "pause_pool",
        argNames: [],
      );

  @override
  Future<void> crateNativeTaskApiPoolInit() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 74, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeTaskApiPoolInitConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiPoolInitConstMeta => const TaskConstMeta(
        debugName: "pool_init",
        argNames: [],
      );

  @override
  Future<void> crateNativeTaskApiResumePool() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 75, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateNativeTaskApiResumePoolConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateNativeTaskApiResumePoolConstMeta =>
      const TaskConstMeta(
        debugName: "resume_pool",
        argNames: [],
      );

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_task_status_Output_unit_AnyhowException(
          FutureOr<void> Function(String, TaskStatus) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_task_status(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_unit_AnyhowException(
      FutureOr<void> Function() raw) {
    return (
      callId,
    ) async {
      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
          FutureOr<void> Function(bool) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_bool(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_pool_status_Output_unit_AnyhowException(
          FutureOr<void> Function(PoolStatus) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_pool_status(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HomeVideoData => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HomeVideoData => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ListenerHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ListenerHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PathBuf => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PathBuf => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TemplateVideoDataInterim => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TemplateVideoDataInterim => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  HomeVideoData
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HomeVideoDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ListenerHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ListenerHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TemplateVideoDataInterim
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TemplateVideoDataInterimImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  HomeVideoData
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HomeVideoDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  HomeVideoData
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HomeVideoDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: false);
  }

  @protected
  FutureOr<void> Function(String, TaskStatus)
      dco_decode_DartFn_Inputs_String_task_status_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function()
      dco_decode_DartFn_Inputs__Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(bool)
      dco_decode_DartFn_Inputs_bool_Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(PoolStatus)
      dco_decode_DartFn_Inputs_pool_status_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<int, String> dco_decode_Map_u_32_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_u_32_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, HomeVideo> dco_decode_Map_u_32_home_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_u_32_home_video(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint32List> dco_decode_Map_u_32_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_u_32_list_prim_u_32_strict(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  HomeVideoData
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HomeVideoDataImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ListenerHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ListenerHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TemplateVideoDataInterim
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TemplateVideoDataInterimImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CrawlerTemplate dco_decode_crawler_template(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return CrawlerTemplate(
      id: dco_decode_u_32(arr[0]),
      baseUrl: dco_decode_String(arr[1]),
      searchUrl: dco_decode_String(arr[2]),
      jsonRaw: dco_decode_String(arr[3]),
      template:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
              arr[4]),
      priority: dco_decode_u_8(arr[5]),
      enabled: dco_decode_bool(arr[6]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  HomeVideo dco_decode_home_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return HomeVideo(
      id: dco_decode_u_32(arr[0]),
      name: dco_decode_String(arr[1]),
      title: dco_decode_String(arr[2]),
      releaseTime: dco_decode_String(arr[3]),
      duration: dco_decode_u_32(arr[4]),
      thumbnailRatio: dco_decode_f_32(arr[5]),
      matedata: dco_decode_metadata(arr[6]),
    );
  }

  @protected
  HttpConfig dco_decode_http_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return HttpConfig(
      port: dco_decode_u_16(arr[0]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<CrawlerTemplate> dco_decode_list_crawler_template(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_crawler_template).toList();
  }

  @protected
  List<HomeVideo> dco_decode_list_home_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_home_video).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, TaskOperationalData)>
      dco_decode_list_record_string_task_operational_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_task_operational_data)
        .toList();
  }

  @protected
  List<(int, HomeVideo)> dco_decode_list_record_u_32_home_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_32_home_video)
        .toList();
  }

  @protected
  List<(int, Uint32List)> dco_decode_list_record_u_32_list_prim_u_32_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_32_list_prim_u_32_strict)
        .toList();
  }

  @protected
  List<(int, String)> dco_decode_list_record_u_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_u_32_string).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_u_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_u_32_u_8).toList();
  }

  @protected
  List<TaskMetadata> dco_decode_list_task_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_task_metadata).toList();
  }

  @protected
  List<UntreatedVideo> dco_decode_list_untreated_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_untreated_video).toList();
  }

  @protected
  Metadata dco_decode_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Metadata(
      hash: dco_decode_String(arr[0]),
      filename: dco_decode_String(arr[1]),
      path:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
              arr[2]),
      size: dco_decode_u_64(arr[3]),
      extension_: dco_decode_String(arr[4]),
    );
  }

  @protected
  PoolData dco_decode_pool_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PoolData(
      status: dco_decode_pool_status(arr[0]),
      tasks: dco_decode_list_record_string_task_operational_data(arr[1]),
    );
  }

  @protected
  PoolStatus dco_decode_pool_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PoolStatus.values[raw as int];
  }

  @protected
  (String, TaskOperationalData) dco_decode_record_string_task_operational_data(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_task_operational_data(arr[1]),
    );
  }

  @protected
  (int, HomeVideo) dco_decode_record_u_32_home_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_32(arr[0]),
      dco_decode_home_video(arr[1]),
    );
  }

  @protected
  (int, Uint32List) dco_decode_record_u_32_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_32(arr[0]),
      dco_decode_list_prim_u_32_strict(arr[1]),
    );
  }

  @protected
  (int, String) dco_decode_record_u_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_32(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_u_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_32(arr[0]),
      dco_decode_u_8(arr[1]),
    );
  }

  @protected
  TaskConfig dco_decode_task_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TaskConfig(
      thread: dco_decode_usize(arr[0]),
      tidyFolder:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
              arr[1]),
    );
  }

  @protected
  TaskMetadata dco_decode_task_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TaskMetadata(
      name: dco_decode_String(arr[0]),
      videoId: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  TaskOperationalData dco_decode_task_operational_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TaskOperationalData(
      status: dco_decode_task_status(arr[0]),
      schedule: dco_decode_u_8(arr[1]),
      lastLog: dco_decode_String(arr[2]),
      createAt: dco_decode_Chrono_Local(arr[3]),
      metadata: dco_decode_task_metadata(arr[4]),
    );
  }

  @protected
  TaskStatus dco_decode_task_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaskStatus.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UntreatedVideo dco_decode_untreated_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UntreatedVideo(
      id: dco_decode_u_32(arr[0]),
      crawlName: dco_decode_String(arr[1]),
      isHidden: dco_decode_bool(arr[2]),
      matedata: dco_decode_metadata(arr[3]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  HomeVideoData
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HomeVideoDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ListenerHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ListenerHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PathBuf
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TemplateVideoDataInterim
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TemplateVideoDataInterimImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HomeVideoData
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HomeVideoDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HomeVideoData
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HomeVideoDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: false);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<int, String> sse_decode_Map_u_32_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_32_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, HomeVideo> sse_decode_Map_u_32_home_video(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_32_home_video(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint32List> sse_decode_Map_u_32_list_prim_u_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_32_list_prim_u_32_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  HomeVideoData
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HomeVideoDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ListenerHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ListenerHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PathBuf
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TemplateVideoDataInterim
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TemplateVideoDataInterimImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CrawlerTemplate sse_decode_crawler_template(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_baseUrl = sse_decode_String(deserializer);
    var var_searchUrl = sse_decode_String(deserializer);
    var var_jsonRaw = sse_decode_String(deserializer);
    var var_template =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
            deserializer);
    var var_priority = sse_decode_u_8(deserializer);
    var var_enabled = sse_decode_bool(deserializer);
    return CrawlerTemplate(
        id: var_id,
        baseUrl: var_baseUrl,
        searchUrl: var_searchUrl,
        jsonRaw: var_jsonRaw,
        template: var_template,
        priority: var_priority,
        enabled: var_enabled);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  HomeVideo sse_decode_home_video(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_releaseTime = sse_decode_String(deserializer);
    var var_duration = sse_decode_u_32(deserializer);
    var var_thumbnailRatio = sse_decode_f_32(deserializer);
    var var_matedata = sse_decode_metadata(deserializer);
    return HomeVideo(
        id: var_id,
        name: var_name,
        title: var_title,
        releaseTime: var_releaseTime,
        duration: var_duration,
        thumbnailRatio: var_thumbnailRatio,
        matedata: var_matedata);
  }

  @protected
  HttpConfig sse_decode_http_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_port = sse_decode_u_16(deserializer);
    return HttpConfig(port: var_port);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<CrawlerTemplate> sse_decode_list_crawler_template(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CrawlerTemplate>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_crawler_template(deserializer));
    }
    return ans_;
  }

  @protected
  List<HomeVideo> sse_decode_list_home_video(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HomeVideo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_home_video(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, TaskOperationalData)>
      sse_decode_list_record_string_task_operational_data(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, TaskOperationalData)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_task_operational_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, HomeVideo)> sse_decode_list_record_u_32_home_video(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, HomeVideo)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_32_home_video(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, Uint32List)> sse_decode_list_record_u_32_list_prim_u_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, Uint32List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_32_list_prim_u_32_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, String)> sse_decode_list_record_u_32_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_32_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_u_32_u_8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_32_u_8(deserializer));
    }
    return ans_;
  }

  @protected
  List<TaskMetadata> sse_decode_list_task_metadata(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TaskMetadata>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_task_metadata(deserializer));
    }
    return ans_;
  }

  @protected
  List<UntreatedVideo> sse_decode_list_untreated_video(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UntreatedVideo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_untreated_video(deserializer));
    }
    return ans_;
  }

  @protected
  Metadata sse_decode_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hash = sse_decode_String(deserializer);
    var var_filename = sse_decode_String(deserializer);
    var var_path =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            deserializer);
    var var_size = sse_decode_u_64(deserializer);
    var var_extension_ = sse_decode_String(deserializer);
    return Metadata(
        hash: var_hash,
        filename: var_filename,
        path: var_path,
        size: var_size,
        extension_: var_extension_);
  }

  @protected
  PoolData sse_decode_pool_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_status = sse_decode_pool_status(deserializer);
    var var_tasks =
        sse_decode_list_record_string_task_operational_data(deserializer);
    return PoolData(status: var_status, tasks: var_tasks);
  }

  @protected
  PoolStatus sse_decode_pool_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PoolStatus.values[inner];
  }

  @protected
  (String, TaskOperationalData) sse_decode_record_string_task_operational_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_task_operational_data(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, HomeVideo) sse_decode_record_u_32_home_video(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_home_video(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, Uint32List) sse_decode_record_u_32_list_prim_u_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_list_prim_u_32_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, String) sse_decode_record_u_32_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_u_32_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_u_8(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  TaskConfig sse_decode_task_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_thread = sse_decode_usize(deserializer);
    var var_tidyFolder =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            deserializer);
    return TaskConfig(thread: var_thread, tidyFolder: var_tidyFolder);
  }

  @protected
  TaskMetadata sse_decode_task_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_videoId = sse_decode_u_32(deserializer);
    return TaskMetadata(name: var_name, videoId: var_videoId);
  }

  @protected
  TaskOperationalData sse_decode_task_operational_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_status = sse_decode_task_status(deserializer);
    var var_schedule = sse_decode_u_8(deserializer);
    var var_lastLog = sse_decode_String(deserializer);
    var var_createAt = sse_decode_Chrono_Local(deserializer);
    var var_metadata = sse_decode_task_metadata(deserializer);
    return TaskOperationalData(
        status: var_status,
        schedule: var_schedule,
        lastLog: var_lastLog,
        createAt: var_createAt,
        metadata: var_metadata);
  }

  @protected
  TaskStatus sse_decode_task_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TaskStatus.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UntreatedVideo sse_decode_untreated_video(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_crawlName = sse_decode_String(deserializer);
    var var_isHidden = sse_decode_bool(deserializer);
    var var_matedata = sse_decode_metadata(deserializer);
    return UntreatedVideo(
        id: var_id,
        crawlName: var_crawlName,
        isHidden: var_isHidden,
        matedata: var_matedata);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          HomeVideoData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as HomeVideoDataImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle(
          ListenerHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ListenerHandleImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PathBufImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
          TemplateVideoDataInterim self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TemplateVideoDataInterimImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          HomeVideoData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as HomeVideoDataImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          HomeVideoData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as HomeVideoDataImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Chrono_Local(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_task_status_Output_unit_AnyhowException(
      FutureOr<void> Function(String, TaskStatus) self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_task_status_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
      FutureOr<void> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_unit_AnyhowException(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_bool_Output_unit_AnyhowException(
      FutureOr<void> Function(bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_bool_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_pool_status_Output_unit_AnyhowException(
      FutureOr<void> Function(PoolStatus) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_pool_status_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void sse_encode_Map_u_32_String(
      Map<int, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_32_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_u_32_home_video(
      Map<int, HomeVideo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_32_home_video(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_u_32_list_prim_u_32_strict(
      Map<int, Uint32List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_32_list_prim_u_32_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHomeVideoData(
          HomeVideoData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as HomeVideoDataImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerListenerHandle(
          ListenerHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ListenerHandleImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PathBufImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
          TemplateVideoDataInterim self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TemplateVideoDataInterimImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_crawler_template(
      CrawlerTemplate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.baseUrl, serializer);
    sse_encode_String(self.searchUrl, serializer);
    sse_encode_String(self.jsonRaw, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTemplateVideoDataInterim(
        self.template, serializer);
    sse_encode_u_8(self.priority, serializer);
    sse_encode_bool(self.enabled, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_home_video(HomeVideo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.releaseTime, serializer);
    sse_encode_u_32(self.duration, serializer);
    sse_encode_f_32(self.thumbnailRatio, serializer);
    sse_encode_metadata(self.matedata, serializer);
  }

  @protected
  void sse_encode_http_config(HttpConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.port, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_crawler_template(
      List<CrawlerTemplate> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_crawler_template(item, serializer);
    }
  }

  @protected
  void sse_encode_list_home_video(
      List<HomeVideo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_home_video(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_task_operational_data(
      List<(String, TaskOperationalData)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_task_operational_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_32_home_video(
      List<(int, HomeVideo)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_32_home_video(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_32_list_prim_u_32_strict(
      List<(int, Uint32List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_32_list_prim_u_32_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_32_string(
      List<(int, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_32_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_32_u_8(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_32_u_8(item, serializer);
    }
  }

  @protected
  void sse_encode_list_task_metadata(
      List<TaskMetadata> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_task_metadata(item, serializer);
    }
  }

  @protected
  void sse_encode_list_untreated_video(
      List<UntreatedVideo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_untreated_video(item, serializer);
    }
  }

  @protected
  void sse_encode_metadata(Metadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hash, serializer);
    sse_encode_String(self.filename, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        self.path, serializer);
    sse_encode_u_64(self.size, serializer);
    sse_encode_String(self.extension_, serializer);
  }

  @protected
  void sse_encode_pool_data(PoolData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pool_status(self.status, serializer);
    sse_encode_list_record_string_task_operational_data(self.tasks, serializer);
  }

  @protected
  void sse_encode_pool_status(PoolStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_record_string_task_operational_data(
      (String, TaskOperationalData) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_task_operational_data(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_32_home_video(
      (int, HomeVideo) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_home_video(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_32_list_prim_u_32_strict(
      (int, Uint32List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_list_prim_u_32_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_32_string(
      (int, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_32_u_8((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_u_8(self.$2, serializer);
  }

  @protected
  void sse_encode_task_config(TaskConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.thread, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        self.tidyFolder, serializer);
  }

  @protected
  void sse_encode_task_metadata(TaskMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_u_32(self.videoId, serializer);
  }

  @protected
  void sse_encode_task_operational_data(
      TaskOperationalData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_task_status(self.status, serializer);
    sse_encode_u_8(self.schedule, serializer);
    sse_encode_String(self.lastLog, serializer);
    sse_encode_Chrono_Local(self.createAt, serializer);
    sse_encode_task_metadata(self.metadata, serializer);
  }

  @protected
  void sse_encode_task_status(TaskStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_untreated_video(
      UntreatedVideo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.crawlName, serializer);
    sse_encode_bool(self.isHidden, serializer);
    sse_encode_metadata(self.matedata, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class HomeVideoDataImpl extends RustOpaque implements HomeVideoData {
  // Not to be used by end users
  HomeVideoDataImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  HomeVideoDataImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_HomeVideoData,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_HomeVideoData,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_HomeVideoDataPtr,
  );

  Map<int, String> get actor =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorGetActor(
        that: this,
      );

  Uint32List get actorFilter => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetActorFilter(
        that: this,
      );

  Map<int, Uint32List> get actorVideos => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetActorVideos(
        that: this,
      );

  Map<int, String> get director => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetDirector(
        that: this,
      );

  Uint32List get directorFilter => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorFilter(
        that: this,
      );

  Map<int, Uint32List> get directorVideos => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetDirectorVideos(
        that: this,
      );

  List<HomeVideo> get filterVideo => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetFilterVideo(
        that: this,
      );

  Map<int, String> get maker =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorGetMaker(
        that: this,
      );

  Uint32List get makerFilter => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetMakerFilter(
        that: this,
      );

  Map<int, Uint32List> get makerVideos => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetMakerVideos(
        that: this,
      );

  Map<int, String> get publisher => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisher(
        that: this,
      );

  Uint32List get publisherFilter => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherFilter(
        that: this,
      );

  Map<int, Uint32List> get publisherVideos => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetPublisherVideos(
        that: this,
      );

  Map<int, String> get series =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorGetSeries(
        that: this,
      );

  Uint32List get seriesFilter => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesFilter(
        that: this,
      );

  Map<int, Uint32List> get seriesVideos => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetSeriesVideos(
        that: this,
      );

  Map<int, String> get tag =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorGetTag(
        that: this,
      );

  Uint32List get tagFilter => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetTagFilter(
        that: this,
      );

  Map<int, Uint32List> get tagVideos => RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorGetTagVideos(
        that: this,
      );

  Map<int, HomeVideo> get videos =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorGetVideos(
        that: this,
      );

  set actor(Map<int, String> actor) =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorSetActor(
          that: this, actor: actor);

  set actorFilter(Uint32List actorFilter) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetActorFilter(
          that: this, actorFilter: actorFilter);

  set actorVideos(Map<int, Uint32List> actorVideos) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetActorVideos(
          that: this, actorVideos: actorVideos);

  set director(Map<int, String> director) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetDirector(
          that: this, director: director);

  set directorFilter(Uint32List directorFilter) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorFilter(
          that: this, directorFilter: directorFilter);

  set directorVideos(Map<int, Uint32List> directorVideos) =>
      RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorSetDirectorVideos(
              that: this, directorVideos: directorVideos);

  set filterVideo(List<HomeVideo> filterVideo) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetFilterVideo(
          that: this, filterVideo: filterVideo);

  set maker(Map<int, String> maker) =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorSetMaker(
          that: this, maker: maker);

  set makerFilter(Uint32List makerFilter) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetMakerFilter(
          that: this, makerFilter: makerFilter);

  set makerVideos(Map<int, Uint32List> makerVideos) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetMakerVideos(
          that: this, makerVideos: makerVideos);

  set publisher(Map<int, String> publisher) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisher(
          that: this, publisher: publisher);

  set publisherFilter(Uint32List publisherFilter) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherFilter(
          that: this, publisherFilter: publisherFilter);

  set publisherVideos(Map<int, Uint32List> publisherVideos) =>
      RustLib.instance.api
          .crateNativeHomeApiHomeVideoDataAutoAccessorSetPublisherVideos(
              that: this, publisherVideos: publisherVideos);

  set series(Map<int, String> series) =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorSetSeries(
          that: this, series: series);

  set seriesFilter(Uint32List seriesFilter) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesFilter(
          that: this, seriesFilter: seriesFilter);

  set seriesVideos(Map<int, Uint32List> seriesVideos) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetSeriesVideos(
          that: this, seriesVideos: seriesVideos);

  set tag(Map<int, String> tag) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetTag(that: this, tag: tag);

  set tagFilter(Uint32List tagFilter) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetTagFilter(
          that: this, tagFilter: tagFilter);

  set tagVideos(Map<int, Uint32List> tagVideos) => RustLib.instance.api
      .crateNativeHomeApiHomeVideoDataAutoAccessorSetTagVideos(
          that: this, tagVideos: tagVideos);

  set videos(Map<int, HomeVideo> videos) =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataAutoAccessorSetVideos(
          that: this, videos: videos);
}

@sealed
class ListenerHandleImpl extends RustOpaque implements ListenerHandle {
  // Not to be used by end users
  ListenerHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ListenerHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ListenerHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ListenerHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ListenerHandlePtr,
  );

  void cancel() => RustLib.instance.api.crateNativeListenerHandleCancel(
        that: this,
      );
}

@sealed
class PathBufImpl extends RustOpaque implements PathBuf {
  // Not to be used by end users
  PathBufImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PathBufImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PathBuf,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBuf,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBufPtr,
  );
}

@sealed
class TemplateVideoDataInterimImpl extends RustOpaque
    implements TemplateVideoDataInterim {
  // Not to be used by end users
  TemplateVideoDataInterimImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TemplateVideoDataInterimImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_TemplateVideoDataInterim,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_TemplateVideoDataInterim,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_TemplateVideoDataInterimPtr,
  );
}
