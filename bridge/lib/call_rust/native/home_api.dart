// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../model/video.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `add_filter`, `clear_filter`, `hide`, `new`, `remove_filter`, `show`
// These types are ignored because they are not used by any `pub` functions: `FilterHomeVideo`, `FilterType`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<HomeVideoData>>
abstract class HomeVideoData implements RustOpaqueInterface {
  Map<int, String> get actor;

  Uint32List get actorFilter;

  Map<int, Uint32List> get actorVideos;

  Map<int, String> get director;

  Uint32List get directorFilter;

  Map<int, Uint32List> get directorVideos;

  Map<int, String> get maker;

  Uint32List get makerFilter;

  Map<int, Uint32List> get makerVideos;

  Map<int, String> get publisher;

  Uint32List get publisherFilter;

  Map<int, Uint32List> get publisherVideos;

  Map<int, String> get series;

  Uint32List get seriesFilter;

  Map<int, Uint32List> get seriesVideos;

  Map<int, String> get tag;

  Uint32List get tagFilter;

  Map<int, Uint32List> get tagVideos;

  set actor(Map<int, String> actor);

  set actorFilter(Uint32List actorFilter);

  set actorVideos(Map<int, Uint32List> actorVideos);

  set director(Map<int, String> director);

  set directorFilter(Uint32List directorFilter);

  set directorVideos(Map<int, Uint32List> directorVideos);

  set maker(Map<int, String> maker);

  set makerFilter(Uint32List makerFilter);

  set makerVideos(Map<int, Uint32List> makerVideos);

  set publisher(Map<int, String> publisher);

  set publisherFilter(Uint32List publisherFilter);

  set publisherVideos(Map<int, Uint32List> publisherVideos);

  set series(Map<int, String> series);

  set seriesFilter(Uint32List seriesFilter);

  set seriesVideos(Map<int, Uint32List> seriesVideos);

  set tag(Map<int, String> tag);

  set tagFilter(Uint32List tagFilter);

  set tagVideos(Map<int, Uint32List> tagVideos);

  void filterActor({required int id});

  void filterDirector({required int id});

  void filterMaker({required int id});

  void filterPublisher({required int id});

  void filterSeries({required int id});

  void filterTag({required int id});

  void filterText({required String text});

  List<HomeVideo> get video;

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<HomeVideoData> newInstance() =>
      RustLib.instance.api.crateNativeHomeApiHomeVideoDataNew();
}
