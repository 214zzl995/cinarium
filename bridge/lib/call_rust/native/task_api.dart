// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../native.dart';
import '../task.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> poolInit() => RustLib.instance.api.crateNativeTaskApiPoolInit();

Future<List<String>> insertionOfTasks({required List<TaskMetadata> tasks}) =>
    RustLib.instance.api.crateNativeTaskApiInsertionOfTasks(tasks: tasks);

Future<void> deleteTask({required String id}) =>
    RustLib.instance.api.crateNativeTaskApiDeleteTask(id: id);

Future<void> pausePool() => RustLib.instance.api.crateNativeTaskApiPausePool();

Future<void> resumePool() =>
    RustLib.instance.api.crateNativeTaskApiResumePool();

Future<void> forcePausePool() =>
    RustLib.instance.api.crateNativeTaskApiForcePausePool();

Future<void> changeTaskStatus(
        {required String id, required TaskStatus status}) =>
    RustLib.instance.api
        .crateNativeTaskApiChangeTaskStatus(id: id, status: status);

PoolData getPoolData() => RustLib.instance.api.crateNativeTaskApiGetPoolData();

ListenerHandle listenerTaskStatusChange(
        {required FutureOr<void> Function(String, TaskStatus) dartCallback}) =>
    RustLib.instance.api
        .crateNativeTaskApiListenerTaskStatusChange(dartCallback: dartCallback);

ListenerHandle listenerPoolStatusChange(
        {required FutureOr<void> Function(PoolStatus) dartCallback}) =>
    RustLib.instance.api
        .crateNativeTaskApiListenerPoolStatusChange(dartCallback: dartCallback);

enum PoolStatus {
  running,
  pause,
  pauseLoading,
  ;
}

enum TaskStatus {
  wait,
  running,
  fail,
  success,
  pause,
  ;
}
